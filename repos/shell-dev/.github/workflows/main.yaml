name: Build and Deploy Node.js to Azure Blob Storage

on:
  push:
    branches:
      - main # Se activa con actualizaciones a la rama main

# Define variables de entorno para detalles de Azure, obtenidas de secretos
# Esto las hace fácilmente accesibles en el paso de Azure CLI
env:
  AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
  AZURE_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}
  # JS_FILENAME_IN_BLOB: "devschool-root-config.js" # Ya no se usa para carga por lotes
  # LOCAL_JS_FILE_PATH: "./dist/devschool-root-config.js" # Ya no se usa, se subirá toda la carpeta dist

permissions:
  id-token: write # Requerido para el login OIDC de Azure
  contents: read # Requerido para actions/checkout

jobs:
  build_and_upload_to_azure:
    runs-on: ubuntu-latest
    # Opcional: Si configura un entorno en GitHub para reglas de protección o secretos específicos del entorno
    # environment: production

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x" # Especifique la versión de Node.js de su proyecto
          cache: "npm" # Opcional: Almacena en caché las dependencias de npm para compilaciones más rápidas

      - name: Install dependencies
        run: npm ci

      - name: Build Node.js project
        run: npm run build
        # Este paso debería producir la carpeta ./dist

      - name: Read package.json properties
        id: package_props
        run: |
          echo "name_repository=$(jq -r '."name-repository"' package.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT
        # Asume que package.json está en la raíz del checkout

      - name: Log in to Azure with OIDC
        uses: azure/login@v1 # O la última versión como v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Upload build artifacts to Azure Blob Storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            REPO_NAME="${{ steps.package_props.outputs.name_repository }}"
            REPO_VERSION="${{ steps.package_props.outputs.version }}"
            BLOB_DESTINATION_PATH="$REPO_NAME/$REPO_VERSION"
            LOCAL_SOURCE_PATH="./dist"

            echo "Uploading contents of $LOCAL_SOURCE_PATH to Azure Blob Storage..."
            echo "Storage Account: ${{ env.AZURE_STORAGE_ACCOUNT_NAME }}"
            echo "Container: ${{ env.AZURE_STORAGE_CONTAINER_NAME }}"
            echo "Blob Destination Path: $BLOB_DESTINATION_PATH"

            az storage blob upload-batch \
              --account-name "${{ env.AZURE_STORAGE_ACCOUNT_NAME }}" \
              --destination "${{ env.AZURE_STORAGE_CONTAINER_NAME }}" \
              --source "$LOCAL_SOURCE_PATH" \
              --destination-path "$BLOB_DESTINATION_PATH" \
              --auth-mode login \
              --overwrite true # Sobrescribe si los archivos ya existen

      - name: Azure logout # Opcional: Buena práctica para cerrar sesión
        if: always() # Asegura que el logout se ejecute incluso si los pasos anteriores fallan
        run: |
          az logout
          echo "Azure logout completed."